/*
 * The MIT License
 *
 * Copyright 2016 ruman.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package alignmentfix;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ruman
 */
public class ExportDialog extends javax.swing.JDialog
{
    public String fileChooserLastDirectory = "";
    public String lastExporter = "";
    public String lastInput = "";
    public String lastOutput = "";
    public AnnotationDocument document = null;
    
    private HashSet<String> foundExporters = new HashSet<>();

    /**
     * Creates new form ExportDialog
     */
    public ExportDialog(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
        
        findExportScripts((new File("")).getAbsoluteFile());
        findExportScripts((new File(System.getProperty("user.dir"))).getAbsoluteFile());
    }
    
    public void restorePreviousSettings()
    {
        ledInputFileName.setText(lastInput);
        ledOutputFileName.setText(lastOutput);
        cmbExporter.setSelectedItem(lastExporter);
    }
    
    private void log(String str)
    {
        logPanel.setText(logPanel.getText() + "\n" + str);
    }
       
    private void findExportScripts(File folder)
    {
        log("Looking for exporter scripts in " + folder.getAbsolutePath());
        
        File[] listOfFiles = folder.listFiles();
        
        for(File f : listOfFiles)
        {
            String filename = f.getAbsolutePath();
            
            if(filename.endsWith(".alnfix.py") && !foundExporters.contains(filename))
            { 
                log("Found " + filename);
                cmbExporter.addItem(filename);
                foundExporters.add(filename);
            }
        }
    }
    
    private void runExporter(String exporter, String input, String output) throws IOException, InterruptedException
    {
        // Export temporary alignmentFix file
        File algnfix_file = File.createTempFile("alignmentFix_export", ".alnfix");
        document.saveToFile(algnfix_file.getAbsolutePath());
        
        // Start exporter on this file
        String[] commands = { "python", exporter , "--input", input, "--output", output, "--alnfix", algnfix_file.getAbsolutePath() };
        ProcessBuilder pb = new ProcessBuilder(commands);
        pb.redirectErrorStream(true);
        
        Process proc = pb.start();
        proc.waitFor();
        
        try(BufferedReader stdout = new BufferedReader(new InputStreamReader(proc.getInputStream())))
        {
            String s;
            
            while((s = stdout.readLine()) != null)
            {
                log(s);
            }
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cmbExporter = new javax.swing.JComboBox<>();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        ledOutputFileName = new javax.swing.JTextField();
        btnSelectOutputFileName = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logPanel = new javax.swing.JTextPane();
        btnSelectExporter = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ledInputFileName = new javax.swing.JTextField();
        btnSelectInputFileName = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export");

        jLabel1.setText("Exporter");

        cmbExporter.setEditable(true);

        btnOK.setText("Export");
        btnOK.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnOKActionPerformed(evt);
            }
        });

        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        btnSelectOutputFileName.setText("...");
        btnSelectOutputFileName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSelectOutputFileNameActionPerformed(evt);
            }
        });

        logPanel.setEditable(false);
        jScrollPane1.setViewportView(logPanel);

        btnSelectExporter.setText("...");
        btnSelectExporter.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSelectExporterActionPerformed(evt);
            }
        });

        jLabel3.setText("Input");

        jLabel4.setText("Output");

        btnSelectInputFileName.setText("...");
        btnSelectInputFileName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSelectInputFileNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbExporter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectExporter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 615, Short.MAX_VALUE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(23, 23, 23)
                        .addComponent(ledInputFileName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectInputFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ledOutputFileName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectOutputFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbExporter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectExporter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ledInputFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectInputFileName)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ledOutputFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectOutputFileName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnCancel))
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOKActionPerformed
    {//GEN-HEADEREND:event_btnOKActionPerformed
        
        try
        {
            String input = ledInputFileName.getText().trim();
            String output = ledOutputFileName.getText().trim();
            
            if(input.equals(output) && JOptionPane.showConfirmDialog(this, "Input and output are the same. Proceed?", "Export", JOptionPane.YES_OPTION)
                    == JOptionPane.NO_OPTION)
            {
                return;
            }
            
            runExporter(cmbExporter.getSelectedItem().toString(), input.toString(), output.toString());
            
            lastOutput = ledOutputFileName.getText();
            lastInput = ledInputFileName.getText();
            lastExporter = cmbExporter.getSelectedItem() != null ? cmbExporter.getSelectedItem().toString() : lastExporter;            
            
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this, ex);
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCancelActionPerformed
    {//GEN-HEADEREND:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSelectOutputFileNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSelectOutputFileNameActionPerformed
    {//GEN-HEADEREND:event_btnSelectOutputFileNameActionPerformed
        JFileChooser fileChooserDlg = new JFileChooser(fileChooserLastDirectory); 
        fileChooserDlg.setDialogTitle("Set output");   
        
        if(fileChooserDlg.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            String filename = fileChooserDlg.getSelectedFile().getAbsolutePath();
            fileChooserLastDirectory = fileChooserDlg.getCurrentDirectory().getAbsolutePath();
            
            ledOutputFileName.setText(filename);            
        }
    }//GEN-LAST:event_btnSelectOutputFileNameActionPerformed

    private void btnSelectExporterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSelectExporterActionPerformed
    {//GEN-HEADEREND:event_btnSelectExporterActionPerformed
        JFileChooser fileChooserDlg = new JFileChooser(fileChooserLastDirectory); 
        fileChooserDlg.setDialogTitle("Load exporter");  
        fileChooserDlg.setFileFilter(new FileNameExtensionFilter("AlignmentFix exporter", "py"));
        
        if(fileChooserDlg.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            String filename = fileChooserDlg.getSelectedFile().getAbsolutePath();
            fileChooserLastDirectory = fileChooserDlg.getCurrentDirectory().getAbsolutePath();
            
            cmbExporter.setSelectedItem(filename);            
        }
    }//GEN-LAST:event_btnSelectExporterActionPerformed

    private void btnSelectInputFileNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSelectInputFileNameActionPerformed
    {//GEN-HEADEREND:event_btnSelectInputFileNameActionPerformed
        JFileChooser fileChooserDlg = new JFileChooser(fileChooserLastDirectory); 
        fileChooserDlg.setDialogTitle("Set input");   
        
        if(fileChooserDlg.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            String filename = fileChooserDlg.getSelectedFile().getAbsolutePath();
            fileChooserLastDirectory = fileChooserDlg.getCurrentDirectory().getAbsolutePath();
            
            ledInputFileName.setText(filename);
            ledOutputFileName.setText(filename);
        }
    }//GEN-LAST:event_btnSelectInputFileNameActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnSelectExporter;
    private javax.swing.JButton btnSelectInputFileName;
    private javax.swing.JButton btnSelectOutputFileName;
    private javax.swing.JComboBox<String> cmbExporter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField ledInputFileName;
    private javax.swing.JTextField ledOutputFileName;
    private javax.swing.JTextPane logPanel;
    // End of variables declaration//GEN-END:variables
}
